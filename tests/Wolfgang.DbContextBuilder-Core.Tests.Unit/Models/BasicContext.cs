
using System.Diagnostics.CodeAnalysis;
using AdventureWorks.Models;
using Microsoft.EntityFrameworkCore;

namespace Wolfgang.DbContextBuilderCore.Tests.Unit.Models;

[ExcludeFromCodeCoverage(Justification = "These are test models created by scaffolding the database and should not be tested")]
internal class BasicContext : DbContext
{
    public BasicContext()
    {

    }

    public BasicContext(DbContextOptions<BasicContext> options) : base(options)
    {
    }


    public virtual DbSet<DatabaseLog> DatabaseLogs { get; set; } = null!;

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
    }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<DatabaseLog>(entity =>
        {
            entity.HasKey(e => e.DatabaseLogId)
                .HasName("PK_DatabaseLog_DatabaseLogID");

            entity.ToTable("DatabaseLog");

            entity.HasComment("Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger ddlDatabaseTriggerLog.");

            entity.Property(e => e.DatabaseLogId)
                .HasColumnName("DatabaseLogID")
                .HasComment("Primary key for DatabaseLog records.");

            entity.Property(e => e.DatabaseUser)
                .HasMaxLength(128)
                .HasComment("The user who implemented the DDL change.");

            entity.Property(e => e.Event)
                .HasMaxLength(128)
                .HasComment("The type of DDL statement that was executed.");

            entity.Property(e => e.Object)
                .HasMaxLength(128)
                .HasComment("The object that was changed by the DDL statment.");

            entity.Property(e => e.PostTime)
                .HasColumnType("datetime")
                .HasComment("The date and time the DDL change occurred.");

            entity.Property(e => e.Schema)
                .HasMaxLength(128)
                .HasComment("The schema to which the changed object belongs.");

            entity.Property(e => e.Tsql)
                .HasColumnName("TSQL")
                .HasComment("The exact Transact-SQL statement that was executed.");

            entity.Property(e => e.XmlEvent)
                .HasColumnType("xml")
                .HasComment("The raw XML data generated by database trigger.");
        });


        modelBuilder.Entity<TableWithDefaults>(entity =>
        {
            entity.HasKey(e => e.Id)
                .HasName("PK_ID");

            entity.ToTable("TableWithDefaults");

            entity.Property(e => e.Id)
                .HasColumnName("DatabaseLogID");

            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.Rowguid)
                .HasColumnName("rowguid")
                .HasDefaultValueSql("(newid())");
        });
    }
}