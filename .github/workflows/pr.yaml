# This workflow runs all branches when a pull request is created. 
# If security settings have been properly configured, any branch that fails this workflow will be blocked from being merged into main and possibly other common branches link develop depending your specific settings

name: PR Checks

on:
  pull_request:
    branches:
      # List any other branches here that you want this workflow to run on
      - main

jobs:
  build-and-test:
    # Specifies the OS to run this workflow on. You can specify more than one. For a complete and current list, review the [documentation] (https://docs.github.com/en/actions/how-tos/write-workflows/choose-where-workflows-run/choose-the-runner-for-a-job)
    runs-on: ubuntu-latest
    if: github.repository != 'Chris-Wolfgang/repo-template' # Only run in child repos otherwise this will fail because the template does not have any projects
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          # Specifies the version of dotnet to use. You can specify multiple versions. For a complate list of supported versions review the [documentation](https://github.com/actions/setup-dotnet#inputs)
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build Solution (Release)
        # Specify any additional build options
        run: dotnet build --no-restore --configuration Release

      - name: Run Tests and Collect Coverage for Each Test Project (Release)
        run: |
          find ./tests -type f -name '*Test*.csproj' | while read proj; do
            echo "Testing $proj"
            dotnet test "$proj" --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory "./TestResults"
          done

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate Coverage Reports (HTML, TextSummary, GitHub Markdown, CSV)
        run: |
          reportgenerator -reports:"TestResults/**/coverage.cobertura.xml" -targetdir:"CoverageReport" -reporttypes:"Html;TextSummary;MarkdownSummaryGithub;CsvSummary"

      - name: Check Coverage Thresholds
        run: |
          if [ ! -f CoverageReport/Summary.txt ]; then
            echo "CoverageReport/Summary.txt not found! Coverage report was not generated."
            exit 1
          fi

          failed_projects=""
          while read -r line; do
            module=$(echo "$line" | awk '{print $1}')
            percent=$(echo "$line" | awk '{print $NF}' | tr -d '%' | xargs)
            echo "Checking module: '$module', percent: '$percent'"
            if [[ "$percent" =~ ^[0-9]+$ ]]; then
              if [ "$percent" -lt 80 ]; then
                echo "FAIL: $module is below 80% ($percent%)"
                failed_projects="$failed_projects $module ($percent%)"
              else
                echo "PASS: $module meets coverage ($percent%)"
              fi
            else
              echo "WARNING: extracted percent value '$percent' is not a number!"
            fi
          done < <(grep -E '^[^ ].*[0-9]+%$' CoverageReport/Summary.txt | grep -v '^Summary')

          if [ -n "$failed_projects" ]; then
            echo "The following projects are below 80% line coverage:$failed_projects"
            exit 1
          fi

      - name: Upload coverage results and reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-results-and-report
          path: |
            TestResults/
            CoverageReport/

      - name: Install DevSkim CLI
        run: dotnet tool install --global Microsoft.CST.DevSkim.CLI

      - name: Run DevSkim Security Scan (Save output)
        run: devskim analyze --source-code . -f text --output-file devskim-results.txt -E

      - name: Show DevSkim Results in Summary
        if: failure()
        run: |
          echo "### DevSkim Security Issues Found"
          cat devskim-results.txt
        shell: bash

      - name: Upload DevSkim Results as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: devskim-results
          path: devskim-results.txt
